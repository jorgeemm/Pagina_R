---
title: "Modificaciones estéticas"
---

```{r}
#| include: false
library(tidyverse)
library(palmerpenguins)
```

## Colores

Para editar los colores de un gráfico se utilizan dos comandos, `color` y `fill`. Cada uno de ellos se utiliza con un tipo de gráfico distinto:

+-----------------------+-----------------------------------------+
| color                 | fill                                    |
+=======================+=========================================+
| -   geom_point        | -   geom_point - algunos tipos de shape |
|                       | -   geom_bar (relleno)                  |
| -   geom_bar (bordes) |                                         |
+-----------------------+-----------------------------------------+

### ¿Dónde modificar los colores?

Tanto el *fill* como el *color* pueden ir dentro o fuera del `aes()`. Se colocarán dentro de este (color = variable) si lo que se busca es dividir el gráfico en función de una tercera variable. En cambio, se situará fuera (color = "color") si se quiere colorear todo el gráfico igual, sin añadir nuevas divisiones ni variables.

#### Dentro del aes():

```{r}
penguins %>% 
  ggplot() + 
  geom_point(aes(x = flipper_length_mm, 
             y = body_mass_g,
             color = species))
```

#### Fuera del aes():

```{r}
penguins %>% 
  ggplot() + 
  geom_point(aes(x = flipper_length_mm, 
             y = body_mass_g),
             color = "red")
```

### ¿Cómo seleccionar los colores?

Aunque los colores se pueden nombrar con su nombre en inglés, lo más cómo es utilizar el código hexadecimal ("red" = "#FF0000"), ya que permite un mayor control sobre los colores que se están empleando.

::: {.callout-tip collapse="true" appearance="simple"}
## ¿Cómo funciona el código Hex?

El sistema hexadecimal no va del 0 al 9, sino de 0 a F. Cada cifra va del 0 al 9, y después se pasa de la A a la F (16 cifras por símbolo).

Partiendo de esta lógica, el código Hex está compuesto por 3 conjuntos de 2 símbolos cada uno, los cuales representa a uno de los colores básicos. Los dos primeros serán indican la presencia de rojo, los segundos el verde y los últimos el azul. Por tanto, cada par va del 00 al FF, de tal forma que cuanto más alta sea la cifra indicada, mayor será la presencia de ese color básico en la mezcla.

Estos conjuntos indican la cantidad de cada uno de los colores que debe mostrar la pantalla. Por tanto, si los tres están al mínimo (#000000), se mostrará el color negro, mientras que si están al máximo (#FFFFFF) será blanco.

Además, a estos tres grupos de colores se puede añadir otro par de números (en esta ocasión de 00 a 99) para indicar la transparencia del color indicado, aunque en ggplot esta forma de añadir la transparencia no suele funcionar.
:::

### Vectores de colores (colorear según una variable)

Si lo que se quiere es indicar una paleta de colores, porque se está coloreando el gráfico en función de otra variable, se puede generar un vector manual con los colores concretos a usar para cada valor, o usar alguna de las múltiples paletas de colores que ya existen en `ggplot`.

#### Vector personalizado

#### Paletas ya existentes

------------------------------------------------------------------------

## Forma

Para modificar la forma de los puntos de un gráfico se utiliza la opción `shape`. Esta opción se emplea principalmente con los gráficos de puntos (`geom_point()`). Las formas existentes son las siguientes:

![](01_img/formas_ggplot.png)

::: callout-important
## Atención

Toda la lógica usada para modificar la forma es la misma explicada en el apartado del color (lo más importante es tener claro si se quiere situar la opción dentro o fuera del aes.

Asimismo, en el caso de que se situara dentro, se podría generar un vector personalizado para establecer qué forma se corresponde con qué valore de la variable divisiva.
:::

------------------------------------------------------------------------

## Transparencia

Se añade con la opción `alpha` = *numero*. La cifra va de 0 a 1, y cuanto más elevada sea menor será la transparencia.

```{r}
ggplot(penguins) +
  geom_bar(aes(x = species), 
           fill = "red",
           alpha = 0.5)
```

------------------------------------------------------------------------

## Tamaño de las líneas

Se añade con la opción `linewidth` = *numero*. La cifra va de 0 a 1, y cuanto más elevada sea mayor será el grosor de la línea.

------------------------------------------------------------------------
