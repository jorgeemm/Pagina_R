{
  "hash": "37690bc4e35c4817f2060b34140c53e5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Unir bases de datos\"\n---\n\n\n\n## Añadir casos (unión vertical)\n\nSe usa el comando `bind_rows`, del paquete `dplyr` (en tidyverse). Añade las filas de una base de datos a las de otra, teniendo en cuenta lo siguiente:\n\n-   **Si el nombre de alguna variable coincide** en ambos df, **los fusiona en una única columna**, añadiendo juntos los valores de ambas bases de datos.\n\n-   **Si existen variables de distinto nombre**, **rellena con NA** los valores del df donde esta no existe.\n\nEjemplo:\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf1 <- data.frame(var1 = 1:3, var2 = c(\"x\", \"y\", \"z\"))\ndf2 <- data.frame(var1 = 4:5, var2 = c(\"w\", \"v\"))\ndf3 <- data.frame(var1 = 6:7, var3 = c(\"m\", \"n\"))\n\nunion_df <- bind_rows(df1, df2, df3)\n\nprint(union_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  var1 var2 var3\n1    1    x <NA>\n2    2    y <NA>\n3    3    z <NA>\n4    4    w <NA>\n5    5    v <NA>\n6    6 <NA>    m\n7    7 <NA>    n\n```\n\n\n:::\n:::\n\n\n\nPara verificar si el nombre de las variables en los df son iguales se usa el siguiente comando. El comando se debe ejecutar dos veces cambiando el nombre de las variables, para ver así qué variables están en el primer df pero no en el segundo, y lo contrario.\n\n-   Variables que están en df1 pero no en df3:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsetdiff(names(df1), names(df3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"var2\"\n```\n\n\n:::\n:::\n\n\n\n-   Variables que están en df3 pero no en df1:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsetdiff(names(df3), names(df1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"var3\"\n```\n\n\n:::\n:::\n\n\n\n::: callout-important\n## Atención\n\nConviene crear una nueva variable en cada df antes de unirlos que indique la procedencia de los datos (ej.: el nombre del df, el año, el mes...)\n:::\n\n------------------------------------------------------------------------\n\n## Añadir variables (unión horizontal)\n\nSe usan las funciones `_join()` de `dplyr`. El objetivo final es tener una base de datos ampliada con un número mayor de variables. Para que funciones, debe haber al menos una variable común en ambos df. Estas son conocidas como claves, y pueden ser:\n\n-   **Primary key** es la variable que permite identificar cada una de las filas (algo único para cada fila). Siempre tiene que exitir.\n-   **Foreing key**: cualquier variable que sea común en dos bases de datos y que por tanto permita unirlas.\n\nEs recomendable trabajar con marcos de datos donde foreign key identifique la unidad de observación de la base de datos.\n\nExisten varias funciones que permiten la unión horizontal, y varían en función del número de observaciones que se conservan tras la fusión.\n\n### Principales argumentos\n\n-   x = : indica una de las bases de datos.\n-   y = : indica la otra base de datos.\n-   by = : indica la(s) variable(s) que permiten unir las bases de datos. Si no se especifica by = , R detecta las variables comunes entre marcos de datos (menos recomendable).\n-   keep = : T o F, para indicar si se quieren preservar la(s) variable(s) especificadas en el argumento by.\n\n### Funciones\n\n-   `left_join()`: añade la información de los datos ***y*** al marco ***x***. Se mantienen todas las observaciones de x, añadiendo únicamente la información de las variables de y para las que existen coincidencias en x.\n\n-   `right_join()`: similar a left_join, pero añadiendo los datos de ***x*** al df ***y***.\n\n-   `inner_join()`: se mantienen solo las observaciones de ***x*** e ***y*** donde existen coincidencias en ambos df, combinando todas las variables de ambos marcos.\n\n-   `full_join()`: combina toda la información de las dos bases de datos, tanto en el número de variables como de casos, incluso cuando no existen coincidencias entre ***x*** e ***y***.\n\n*inner_join() es una opción más conservadora full_join(), ya que en el caso de haber algún caso que no sea común lo omite, mientras que en el segundo se unen todos los casos.*\n\n------------------------------------------------------------------------\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}