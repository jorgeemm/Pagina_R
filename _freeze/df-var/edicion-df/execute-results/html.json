{
  "hash": "fe6baef0c8b4d907b84f9d2bfa760100",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Edición de bases de datos\"\n---\n\n\n\n\n\n\n## Modificar el fichero\n\n### Filter: seleccionar casos\n\nSe usa el comando `filter`, del paquete `dplyr` (en `tidyverse`). Se establecen una serie de condiciones lógicas a partir de las cuales la función retendrá únicamente los casos (filas) que cumplen con dicha condición (*condiciones como ==, \\>, %in%, etc.*).\n\nEj.: en una base de datos donde los casos son municipios, seleccionar solo aquellos pertenecientes a Murcia o Almería:\n\n``` r\n# Opción 1\ndatos_filtrados <- datos %>% \n  filter(Provincia==\"Almería\" | Provincia==\"Murcia\")\n\n# Opción 2  \ndatos_filtrados <- datos %>% \n  filter(id_provincia %in% c(5,35))\n```\n\nSi se quieren seleccionar todos los casos menos los que cumplen una determinada excepción, se usa ! antes de la condición. En el siguiente ejemplo, quedarán en la base de datos todos los casos menos los de Cs y Otros:\n\n``` r\nfilter(!(datos$recuerdo %in% c(\"Cs\",\"Otros\")))\n```\n\n::: callout-tip\nAl usar tanto *filter* como *select*, conviene guardar los cambios dentro de un nuevo objeto y dejar el dataset original sin modificar.\n:::\n\n### Select: seleccionar variables\n\nSe usa el comando `select`, del paquete `dplyr`. Esta función permite reducir el número de columnas, por lo que resulta de gran utilidad cuando tenemos bases de datos con muchas variables y solo vamos a trabajar con algunas de ellas.\n\nSeleccionar una columna: `select(datos, nombre_variable)`.\n\nEste comando permite seleccionar más de una variable a la vez: `select(datos, x1, x2, x3)`.\n\nTambién se pueden eliminar una o varias variables que no se quieran en el dataset: `select(datos, -variable)`\n\n### Ordenar las variables\n\n**Variable numérica:**\n\n-   Orden ascendente:\n    -   Opción 1: `datos %>% arrange(variable)`\n    -   Opción 2: `datos <- datos[order(datos$variable), ]`\n-   Orden descendente:\n    -   Opción 1: `datos %>% arrange(desc(variable))`\n    -   Opción 2: `datos <- datos[order(-datos$variable), ]`\n-   Se pueden ordenar los datos por dos variables simultáneamente:\n    -   Opción 1: `datos <- datos %>% arrange(var1, var1)`\n    -   Opción 2: `datos <- datos[order(datos$var1, datos$var2), ]`\n\n**Variable categórica:**\n\n-   Se usan los comandos anteriores para ordenar por orden alfabético ascendente o descendente\n-   Orden personalizado: `mutate(variable = fct_relevel(variable, c(\"categoría1\", \"cat2\", \"catn\")))` Ej.:\n\n``` r\nmutate(partido = fct_relevel(party, c(\"PP\", \"PSOE\", \"VOX\", \"SUMAR\", \"Otros\")))\n```\n\n------------------------------------------------------------------------\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}